/****************************************
*  			LEDs			  			
******	BASETATION	******				
While: ON								
										
YELLOW(2)	- Radio Silent				
										
Flashing: TOGGLE						
RED(0)		- Redesign Topology			
GREEN(1)	- Message Sent				
										
******	SENSOR MOTE	******				
While: ON								
										
RED(0) 				- Sensoring state	
GREEN(1) 			- Requesting Father	
YELLOW(2)+GREEN(1)	- Radio Silent		
										
Flashing: TOGGLE						
										
YELLOW(2)+RED(0)	- Message Sent		
*****************************************/

#include "/home/terra/TerraNet_v0.1/terra/TerraNet.defs"
#define REQ_FATHER 3
#define TOPO_DESIGN 2
#define DATA_MSG	1


var ushort nodeid = getNodeId();

pktype usrMsg from radioMsg with
	var ubyte[4] d8;
	var ushort[4] d16;
	var ulong[2] d32;
end

var usrMsg tempMsg;

var ubyte stat;
var ushort father;
var ubyte jump;
var ushort send_seq = 0;
var ushort period = 20;

var ushort[10] childID;
var ushort[10] seq;

if nodeid == 11 then
/******************************
* BASE STATION
*******************************/
	father = 1;
	jump = 1;
end

/******************************
* SENSING MOTE
*******************************/

emit LED1(ON);
loop do

	/******************************
	* REQUEST FATHER
	*******************************/

	if nodeid != 11 then

		loop do
			par/or	do				
				father = 0;
				var usrMsg rqMsg;
				rqMsg.source = nodeid;
				rqMsg.target = BROADCAST;
				rqMsg.type = REQ_FATHER;
				rqMsg.d16[0] = nodeid;
				emit SEND(rqMsg);
				await SEND_DONE(REQ_FATHER);

				var usrMsg topMsg = await RECEIVE(TOPO_DESIGN);

				father = topMsg.source;
				jump = topMsg.d8[0];
				topMsg.source = nodeid;	
				topMsg.d8[0] = jump + 1;
				period = topMsg.d16[0];

				emit SEND(topMsg);
				await SEND_DONE(TOPO_DESIGN);

				emit LED2(TOGGLE);
				await 5s;
				emit LED2(TOGGLE);
				break;
			with
				//timeout
				await 10s;
			end
		end

	end

	/******************************
	* SENSING
	*******************************/
	emit LED0(ON);
	emit LED1(OFF);

	par/or do	
		var usrMsg reqMsg = await RECEIVE(REQ_FATHER);
		if nodeid == 11 then
			emit LED0(TOGGLE);
			period = reqMsg.d16[0];

			// Start topology
			var usrMsg topoMsg;
			topoMsg.source = nodeid;
			topoMsg.target = BROADCAST;
			topoMsg.type = TOPO_DESIGN;
			topoMsg.d8[0] = 1; //Jump
			tempMsg.d8[0] = 1;			
			topoMsg.d8[1] = tempMsg.d8[0];
			topoMsg.d16[0] = period;
			emit SEND(topoMsg);
			await SEND_DONE;
			

			emit LED2(TOGGLE);
			await 10s; // Radio Silent
			emit LED2(TOGGLE);
		end
	
		emit LED0(OFF);
		emit LED1(ON);
	with
		if nodeid == 11 then
			await FOREVER;
		else

			loop do
				var usrMsg topMsg = await RECEIVE(TOPO_DESIGN);

				father = topMsg.source;
				topMsg.source = nodeid;
				jump = topMsg.d8[0];
				tempMsg.d8[0] = topMsg.d8[1];
				period = topMsg.d16[0];

				emit SEND(topMsg);
				await SEND_DONE(TOPO_DESIGN);
	
				emit LED2(TOGGLE);
				await 10s;
				emit LED2(TOGGLE);
			end
		end
	with
		loop do
			await Q_READY;
			var usrMsg msgRadio;
			loop do
				stat = qGet(msgRadio);

				msgRadio.target = father;
				msgRadio.source = nodeid;
				msgRadio.d8[2] = qSize();
				inc send_seq;
				msgRadio.d16[2] = send_seq;
			
				emit SEND_ACK(msgRadio);

				emit LED2(TOGGLE);

				loop do	
					var ubyte ack = await SEND_DONE_ACK(DATA_MSG);
					if ack != 0 then
						break;
					end
					emit SEND_ACK(msgRadio);
				end
				if qSize() == 0 then
					break;
				end
			end
		end
	with
		loop do
			par/and do
				emit REQ_TEMP();
				var ushort temp = await TEMP;
				tempMsg.d16[0] = temp;
				tempMsg.source = nodeid;
				tempMsg.d16[1] = nodeid;
				tempMsg.type = DATA_MSG;
				inc tempMsg.d8[0];
				await (jump)s;
				stat=qPut(tempMsg);
			with
				await (period)s;
			end		
		end
	with
		loop do
			var usrMsg rMsg = await RECEIVE(DATA_MSG);

			loop i,10 do
				if childID[i] == rMsg.source then
					if seq[i] < rMsg.d16[2]	then
						seq[i] = rMsg.d16[2];
						stat=qPut(rMsg);
						break;
					end
				end
				if childID[i] == 0 then
					childID[i] = rMsg.source;
					seq[i] = rMsg.d16[2];
					stat=qPut(rMsg);
					break;
				end
			end
		end
	end
end
